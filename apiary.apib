FORMAT: 1A
HOST: http://api.honeygrow.com/

# Honeygrow

Honeygrow's API mockup

#Error Handling

The errors will be handled the same way for ALL responses.

Each response should comply with the following scheme:

body: {

        result:{
        
                error_code: [ success, error_1, error_2, error_n ],
                
                message: "Descriptive NON TECHNICAL message" //for developer usage
        }
}


## OAuth Collection [/oauth]

### Get a new access token [GET /oauth/token]

+ Request (application/x-www-form-urlencoded)

        + Parameters
            + grant_type:       "refresh_token"
            + refresh_token:    String
            + client_id:        String

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                auth:{ 
                
                    "token":            "ascdasdca234234rascaeq3", 
                    "refresh_token":    "asdcasdca234ghhret324" 
                    }
            }
        }
        
## Users Collection [/users]

### List All Users [GET]

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                [
                    {
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "johndoe@somedomain.com"
                        "password": "123456",
                        "gender":"male",
                        "birthday":"00/00/0000"
                    },
                    {
                        "first_name": "Jane",
                        "last_name": "Doe",
                        "email": "janedoe@somedomain.com"
                        "password": "1234567",
                        "gender":"female",
                        "birthday":"11/11/1111"
                    },
                    {
                        "first_name": "Some",
                        "last_name": "Body",
                        "email": "somebody@somedomain.com"
                        "password": "12345678",
                        "gender":"",
                        "birthday":""
                    }
                ]
            }
        }
        
### Retrieve current user [GET /users/me{?userParams}]

The user will be retrieved using the token. That means that the user will be found in
the Database using the provided token.

userParams:       optional parameters, it will retrieve the parameters declared in the userParams, if there is not userParam it will retrieve the basic user info.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <the_token / the_jwt_token> 
            
        
+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                {
                    "first_name": "John",
                    "last_name": "Doe",
                    "email": "johndoe@somedomain.com"
                    "password": "123456",
                    "gender":"male",
                    "birthday":"00/00/0000"
                }
            }
        }
        
### Edit current user [PUT /users/]

Edit the current user's information

+ Request (application//x-www-form-urlencoded)

    + Parameters
            + first_name:   "One",
            + last_name:    "Guy",
            + gender:       "male",
            + birthday:     "22/22/2222"
            
    + Headers
    
            Authorization: Bearer <the_token / the_jwt_token> 
        
+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                {
                    "first_name":   "One",
                    "last_name":    "Guy",
                    "gender":       "male",
                    "birthday":     "22/22/2222"
                }
            }
        }
        
### Create a New User [POST /users]

Create a new User. This endpoint should be called when manually adding
user information (i.e. no Facebook signup)

+ Request (application/json)

        {
            "first_name": "One",
            "last_name": "Guy",
            "email": "oneguy@somedomain.com"
            "password": "123456789",
            "gender":"male",
            "birthday":"22/22/2222"
        }

+ Response 201 (application/json)

    + Headers

            Location: /users/{user_id}

    + Body
    
            {
                result:{
                    error_code: 1234,
                    message: "Error/Success message here"
                },
                response:
                {
                    "first_name": "One",
                    "last_name": "Guy",
                    "email": "oneguy@somedomain.com"
                    "password": "123456789",
                    "gender":"male",
                    "birthday":"22/22/2222"
                }
            }

      
### Login a User manually using username/password[POST /users/login/]

ogin a User manually using username/password. This endpoint should be called when
manually sign in (i.e. no Facebook signup)

+ Request (application/x-www-form-urlencoded)

        username=<some username>
        password=<the_password>

+ Response 201 (application/json)

    + Body
    
            {
                result:{
                    error_code: 1234,
                    message: "Error/Success message here"
                },
                response:
                {
                    "first_name": "One",
                    "last_name": "Guy",
                    "email": "oneguy@somedomain.com"
                    "password": "123456789",
                    "gender":"male",
                    "birthday":"22/22/2222"
                }
            }
            
### Login a User via Facebook [POST /users/login/facebook]

Login or create a new User via Facebook. Endpoint requires FacebookId 
(should be Facebook token retrieved from device's Facebook login instead, and 
then query from our server using passport-facebook-token to retrieve the
user's info)

+ Request (application/x-www-form-urlencoded)

        facebook_token=<the_token_sfasgghfgjtetwerfafbdsgnhsga>

+ Response 201 (application/json)

    + Body
    
            {
                result: 
                {
                    error_code: 1234,
                    message: "Error/Success message here"
                },
                response:
                {
                    tokens:{
                        "token":"",
                        "refresh_token":""
                    },
                    "first_name": "Another",
                    "last_name": "Guy",
                    "email": "anotherguy@somedomain.com"
                    "profile_picture": "https://facebooks_picture_url",
                    "gender":"male",
                    "birthday":"33/33/3333"
                }
            }
            
### Confirm email address [GET /users/confirm_email/{token}]

After creating an account, the user must confirm his email address by clicking on a 
provided email that should look like this endpoint

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                //response to be defined
            }
        }
        
### Password reset [POST /users/reset_password]

Reset your password when lost. This endpoint will send a temporary password for 
the user to use so he can reset his lost password. This temporary password will be
sent to the user's SAVED EMAIL(not the one provided). The provided email should 
match the saved one.

+ Request (application/x-www-form-urlencoded)

        email_address: users_email@somedomain.com

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                //response to be defined
            }
        }
        
### Change password [POST /users/change_password]

Change user's password. 

+ Request (application/x-www-form-urlencoded)

        + Parameters
        
            + email_address:    users_email@somedomain.com
            + current_password: password
            + new_password:     new_password
            + new_password_2:   new_password
        
        + Headers
        
                Authorization: Bearer <the_token / the_jwt_token>


+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                //response to be defined
            }
        }
        
### Manage push notifications [POST /users/push]

Enable/Disable push notifications for the current user

+ Request (application/x-www-form-urlencoded)

        + Parameters
        
            + device_token:             (device token)
            + os:                       (ios / android)
            + notification_status:      (1 = enable / 0 = disable )
        
        + Headers
        
                Authorization: Bearer <the_token / the_jwt_token>


+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                //response to be defined
            }
        }
        
### Upload profile picture [POST /users/picture]

Set the url for a newly AWS CDN uploaded picture

+ Request (application/x-www-form-urlencoded)

        + Parameters
        
            + url:             "(AWS CDN url)"
        
        + Headers
        
                Authorization: Bearer <the_token / the_jwt_token>


+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                //response to be defined
            }
        }

        
### Get credit cards [GET /users/cards{?customerId}]

Retrieves all the credit cards the user has saved in his account

+ Request
        
    + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                [
                    {
                        "id":               "card_16wdxa2eZvKYlo2CS59N75Un",
                        "address_city":     "Detroit",
                        "address_country":  "US",
                        "address_line1":    "123 Fake St",
                        "address_line2":    "Apt 4",
                        "address_state":    "MI",
                        "address_zip":      "48201",
                        "brand":            "Visa",
                        "exp_month":        11,
                        "exp_year":         2018,
                        "last4":            "1881",
                        "name":             "Jane Austen"
                    },
                    {
                        "id":               "card_16wdxa2eZvKYlo2CS59N75Un",
                        "address_city":     "Detroit",
                        "address_country":  "US",
                        "address_line1":    "123 Fake St",
                        "address_line2":    "Apt 4",
                        "address_state":    "MI",
                        "address_zip":      "48201",
                        "brand":            "Visa",
                        "exp_month":        11,
                        "exp_year":         2018,
                        "last4":            "1881",
                        "name":             "Jane Austen"
                    }
                ]
            }
        }
        
### Get a Credit Card [GET /users/cards/{card_id}]

Get a credit card from the user's account

+ Request 
        
    + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                "id":               "card_16wdxa2eZvKYlo2CS59N75Un",
                "address_city":     "Detroit",
                "address_country":  "US",
                "address_line1":    "123 Fake St",
                "address_line2":    "Apt 4",
                "address_state":    "MI",
                "address_zip":      "48201",
                "brand":            "Visa",
                "exp_month":        11,
                "exp_year":         2018,
                "last4":            "1881",
                "name":             "Jane Austen"
            }
        }
        
### Add a Credit Card [POST /users/cards/add]

Add a credit card to the user's account, once in has been verified by Stripe's 
servers. The token retrieved by Stripe is the parameter that shall be sent to this 
endpoint to call Stripe and save the card

+ Request (application/x-www-form-urlencoded)
    
        + Parameters
        
            + cardToken:     cardToken value
            + customerId:    stripe customer id, if the user already have one, if not don't send the parameter
        
        + Headers
        
                Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            "errors": null,
            "response": {
                "id": "card_173CYyEu2elTBFRo8Ur6mxSJ",
                "object": "card",
                "address_city": null,
                "address_country": null,
                "address_line1": null,
                "address_line1_check": null,
                "address_line2": null,
                "address_state": null,
                "address_zip": null,
                "address_zip_check": null,
                "brand": "American Express",
                "country": "US",
                "customer": "cus_7HkRLvSe4Zy0MJ",
                "cvc_check": "pass",
                "dynamic_last4": null,
                "exp_month": 9,
                "exp_year": 2019,
                "fingerprint": "9AJHoinJw2ptr5lO",
                "funding": "credit",
                "last4": "8431",
                "metadata": {},
                "name": null,
                "tokenization_method": null
              },
             "message": "Card Saved"
        }
        
### Edit a Credit Card [PUT /users/cards/{card_id}]

Edit a credit card saved in the user's account, 

+ Request (application/x-www-form-urlencoded)
    
        + Parameters
        
            + expMonth:        11,
            + expYear:         2018,

        
        + Headers
        
                Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                "id":               "card_16wdxa2eZvKYlo2CS59N75Un",
                "address_city":     "Detroit",
                "address_country":  "US",
                "address_line1":    "123 Fake St",
                "address_line2":    "Apt 4",
                "address_state":    "MI",
                "address_zip":      "48201",
                "brand":            "Visa",
                "exp_month":        11,
                "exp_year":         2018,
                "last4":            "1881",
                "name":             "Jane Austen"
            }
        }
        
### Delete a Credit Card [DELETE /users/cards/{card_id}]

Delete a credit card from the user's account

+ Request (application/x-www-form-urlencoded)
        
    + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                //response to be defined
            }
        }
        
### Pay - One time only [POST /users/pay/once]

Pay with a credit card after entering the card information. Card might not be saved

+ Request (application/x-www-form-urlencoded)
    
        + Parameters
        
            + stripe_token:     stripe_token_value
            + amount:           float
            + currency:         3-letter ISO code
        
        + Headers
        
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                //response to be defined
            }
        }
        
### Pay - One time only [POST /users/pay/{card_id}]

Pay with a saved credit card by providing the card id

+ Request (application/x-www-form-urlencoded)
    
        + Parameters
        
            + amount:           float
            + currency:         3-letter ISO code
        
        + Headers
        
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                //response to be defined
            }
        }
        
### Pay - One time only [POST /users/pay/]

Pay with a default saved credit card by providing the card id

+ Request (application/x-www-form-urlencoded)
    
        + Parameters
        
            + amount:           float
            + currency:         3-letter ISO code
        
        + Headers
        
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                //response to be defined
            }
        }


## Customers Collection [/customers]
        
### Send Push Notification [POST /customers/pushNotifications/send]

+ Request (application/x-www-form-urlencoded)
    
        + Parameters
        
            + checked_in_time   Date
            + os                String ("iphone/android")
            + enabled           int (0 = disable / 1 = enable)
            + user_id           String
        
        + Headers
        
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                //response to be defined
            }
        }


## Stores Collection [/stores]

### Get all Stores [GET]

Get all stores in no particular order

+ Response 200

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                [
                    "place_id": "asdsc34fddgfaa",
                    "place_name": "16TH STREET PHILADELPHIA, PA",
                    "place_description": "110 s. 16th st. (btwn sansom + chestnut) philadelphia, pa 19102 | 215 279 7724 hours 11am-10pm daily",
                    "place_image": "url",
                    "place_latitud": "40.0402454",
                    "place_longitude": "-75.365108",
                    "zip_code": "19103",
                    "google_maps_link": "https://www.google.com/maps/"place/honeygrow/40.0402454,-75.365108",
                    "waze_link": "url"
                ],
                [],
                []
            }
        }

### Edit a store [PUT /stores/{store_id}]

+ Request (application/x-www-form-urlencoded)

        + Parameters
        
            + place_name:          "16TH STREET PHILADELPHIA, PA"
            + place_description:   "110 s. 16th st. (btwn sansom + chestnut) philadelphia, pa 19102 | 215 279 7724 hours 11am-10pm daily"
            + place_image:         "url"
            + place_latitud:       "40.0402454"
            + place_longitude:     "-75.365108"
            + zip_code:            "19103"
            + google_maps_link:    "https://www.google.com/maps/"place/honeygrow/40.0402454,-75.365108"
            + waze_link:           "url"
        
        + Headers
        
            Authorization: Bearer <the_token / the_jwt_token>
            
+ Response 200

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                [
                    "place_id": "asdsc34fddgfaa",
                    "place_name": "16TH STREET PHILADELPHIA, PA",
                    "place_description": "110 s. 16th st. (btwn sansom + chestnut) philadelphia, pa 19102 | 215 279 7724 hours 11am-10pm daily",
                    "place_image": "url",
                    "place_latitud": "40.0402454",
                    "place_longitude": "-75.365108",
                    "zip_code": "19103",
                    "google_maps_link": "https://www.google.com/maps/"place/honeygrow/40.0402454,-75.365108",
                    "waze_link": "url"
                ],
                [],
                []
            }
        }

### Delete a store [DELETE /stores/{store_id}]

+ Request 
        
    + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>
            
+ Response 200

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                //response to be defined
            }
        }

## Loyalty Collection [/loyalty]

### Add loyalty level [POST /loyalty/level]

+ Request (application/x-www-form-urlencoded)
        
        + Parameters
            + name      :   String  // Name of the level
            + points    :   Number  // Minimum number of points to reach the level
        + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
          "errors": null,
          "response": {
            "__v": 0,
            "name": "Blue",
            "points": 100,
            "_id": "5643b7c95ea84aae521e04a2"
          },
          "message": "Loyalty Level successfully saved"
        }
        
### Edit loyalty level [PUT /loyalty/level]

+ Request (application/x-www-form-urlencoded)
        
        + Parameters
            + levelId   :   String  // id of level
            + points    :   Number  // Minimum number of points to reach the level
            + name      :   String  // Name of the level
        + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
          "errors": null,
          "response": {
            "_id": "5643b7c95ea84aae521e04a2",
            "name": "Blue",
            "points": 100,
            "__v": 0
          },
          "message": "Loyalty Level successfully updated"
        }
        
### Delete loyalty level [DELETE /loyalty/level]

+ Request (application/x-www-form-urlencoded)
        
        + Parameters
            + levelId   :   String  // id of level
        + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
          "errors": null,
          "response": {
            "_id": "5643b7c95ea84aae521e04a2",
            "name": "Blue",
            "points": 100,
            "__v": 0
          },
          "message": "Loyalty Level successfully deleted"
        }
        
### Add loyalty source [POST /loyalty/source]

+ Request (application/x-www-form-urlencoded)
        
        + Parameters
            + description   :   String  // Description of the source
        + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
          "errors": null,
          "response": {
            "__v": 0,
            "description": "Otro",
            "_id": "56411833b1a526396fe97cfb"
          },
          "message": "Loyalty Source successfully saved"
        }

### Accumulate loyalty points [POST /loyalty]

+ Request (application/x-www-form-urlencoded)
        
        + Parameters
            + userId        :   String  // Userid in the database
            + source        :   String  // String ("GAME", "HEALTH" or "SHOPPING")
            + sourceAmount  :   Number  // The number of points of the specific source ex 100 Game points
            + points        :   Number  // The loyalty points to increment
            + balanceBefore :   Number  // The balance before the increment
            + balanceAfter  :   Number  // The balance after the increment
            + place         :   String  // Place of the incremente ex iOS Device, Specific Rest 
            
        + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                accumulated_points: 00, //converted (to HG loyalty points)
                new_balance:        00  //total HG points

            }
        }

### Convert Loyalty to Money [POST /loyalty/toMoney]

+ Request (application/x-www-form-urlencoded)
        
        + Parameters
        
            + amount:       float   //(loyalty points to convert)
            + currency:     String  //String representing currency to convert to //(USD,CRC,YEN etc)
            
        + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                amount: 00,         //converted (to desired currency)
                currency_code: USD  //total HG points

            }
        }


## Orders Collection [/orders]

### Place an order [POST /orders]

+ Request
        
        + Parameters
            + userId                Temporally while OAuth is disabled
            + items:                Array
            + subtotal:             Number
            + promo_code_discount:  Number
            + loyaltyDiscount:      Number
            + taxes:                Number
            + total:                Number
            + promo_code:           String
            + loyaltyRedeem:        Int
            + customerId            String Stripe customer id
            + amount                Int amount to charge
            + currency              String currency to charge according to ISO, probably just usd
            + description           Description of the charge to be saved in Stripe
            + source                Card token from stripe
            
            
        + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                "transaction_id":   "adca2341234asd",// (mongodb id)
                "order_id":         "12345"// (POS order_id)

            }
        }

### Get orders history [GET /order/history{?fromDate,toDate}]

+ Request
        
        
    + Headers
    
            Authorization: Bearer <the_token / the_jwt_token>

+ Response 200 (application/json)

        {
            result:{
                error_code: 1234,
                message: "Error/Success message here"
            },
            response:
            {
                "transaction_id":   "adca2341234asd",// (mongodb id)
                "order_id":         "12345"// (POS order_id)

            }
        }